1.Update the package repository (All hosts)
sudo apt-get update

2. Install Docker (All hosts)
sudo apt-get install docker.io -y


sudo systemctl enable docker

sudo systemctl status docker

sudo systemctl start docker



3. Access Repos via HTTPS (All hosts)
sudo apt-get install apt-transport-https curl -y

sudo apt-get install curl -y

4. Add K8S key and Repo (All hosts)
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add

sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"

sudo apt-get update

5. Update the package repository and Install K8S components (All hosts):

sudo apt-get install kubeadm kubelet kubectl

sudo apt-mark hold kubeadm kubelet kubectl

6. Add the hosts entry (All hosts)
edit the file "/etc/hosts"

7. Disable SWAP (All hosts)
sudo swapoff -a
edit /etc/fstab to remove the swap entry

8. Initiate the Cluster(Only on Master node)
sudo kubeadm init --v=5   //--v=5 is for debug only. make sure VM has more than 2 GB of Memory


9. Join from node using below command or similar based on the output from above
sudo kubeadm join 192.168.20.5:6443 --token 0e8q0g.i27ge3nmyceei7eg --discovery-token-ca-cert-hash sha256:88ac96250b0c8b353e4e05dd6d6e2cff3bf05efbbf6ba497aa981acc1b90bb55
when worker node is not able to join the cluster --

Create '/etc/docker/daemon.json'


{
"exec-opts": ["native.cgroupdriver=systemd"]
}

and run below :

 sudo systemctl daemon-reload
 sudo systemctl restart docker
 sudo systemctl restart kubelet


9. Set the kubectl context auth to connect to the cluster(Only on Master node)
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

10. Pod Network Addon(Calico) (Only on Master node)
Ref: https://docs.projectcalico.org/gettin...

curl https://docs.projectcalico.org/manife...
 -O
vi calico.yaml

11. Generate Token to add worker Node(Only on Master node)
#Create a new Token
sudo kubeadm token create
#List Tokens created
sudo kubeadm token list
#Find Certificate Hash on Master
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2(GREATER THAN SYMBOL)/dev/null | openssl dgst -sha256 -hex | sed 's/^.* //'

12. Join Nodes (Only on Worker nodes)
sudo kubeadm join --token TOKEN_ID CONTROL_PLANE_HOSTNAME:CONTROL_PLANE_PORT --discovery-token-ca-cert-hash sha256:HASH
(Formed using outputs from step 10, treat CAPS as variables to be replaced)

13. Want to run workloads on Master?(Only on Master Node)
kubectl taint nodes --all node-role.kubernetes.io/master-

14. Sample Deployment file:
=========================
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
=========================

15. Apply the deployment:
kubectl apply -f FILE_NAME





---weavenet ---
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"





------------------

Create VM from VagrantFile - eg. Vagrant up k8snode01
select networkinterface 2
then adjust the Network in VirtualBox, 1. Bridge Adaptor, 2. Nat Network - k8-NatNetwork
restart the VM in Normal mode to get the IP.
Loging to VM using vagrant/vagrant 
install net-tools -- using - sudo apt-get install net-tools -y





when worker node is not able to join the cluster --

Create '/etc/docker/daemon.json'


{
"exec-opts": ["native.cgroupdriver=systemd"]
}

and run below :

 systemctl daemon-reload
 systemctl restart docker
 systemctl restart kubelet


---- Swaff off

sudo swapoff -a
sudo sed -i '/ swap / s/^/#/' /etc/fstab
